import pygame
import sys
import time

WIDTH = 400
HEIGHT = 400
CELL_SIZE = 20

def draw_matrices(matrix, A1_start_pos, A2_start_pos, A1_goal_pos, A2_goal_pos, path_A1_dijkstra, path_A2_dijkstra, path_A1_a_star, path_A2_a_star):
    '''
    This function draws the matrices in a Pygame window.
    It displays the original matrix, the matrix generated by the Dijkstra algorithm, and the matrix generated by the A* algorithm.
    Additionally, it shows the number of tiles traversed by each algorithm.
    '''
    
    pygame.init()  # Ensure that Pygame is initialized

    WINDOW_WIDTH = WIDTH * 2 + 30
    WINDOW_HEIGHT = HEIGHT * 2 + 30
    window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("Pathfinding Comparison")

    # Load images for obstacles, agents, goals, and paths
    obstacle_image = pygame.image.load("img/obstaculo.png")
    agent_image = pygame.image.load("img/agente.png")
    agent2_image = pygame.image.load("img/agente2.png")
    goal1_image = pygame.image.load("img/meta.png")
    goal2_image = pygame.image.load("img/meta.png")
    path_image = pygame.image.load("img/camino.png")
    path2_image = pygame.image.load("img/camino2.png")
    path_both_image = pygame.image.load("img/camino_both.png")
    floor_image = pygame.image.load("img/piso.png")

    # Dictionary to map matrix values to images
    drawing = {
        1: obstacle_image,
        2: agent_image,
        3: agent2_image,
        5: goal1_image,
        6: goal2_image,
        'x': path_image,
        'y': path2_image,
        'xy': path_both_image,
        0: floor_image
    }

    # Initialize matrices to display
    matrix_dijkstra = [row[:] for row in matrix]
    matrix_a_star = [row[:] for row in matrix]

    # List of matrices to be drawn, along with their titles and positions
    matrices = [
        (matrix, "Original Obstacles", (5, 5)),
        (matrix_dijkstra, "Dijkstra", (WIDTH + 15, 5)),
        (matrix_a_star, "A*", (5, HEIGHT + 15))
    ]

    def draw_matrix(matrix, x_offset, y_offset):
        # Loop through each cell in the matrix and draw the corresponding image
        for i, row in enumerate(matrix):
            for j, value in enumerate(row):
                x = j * CELL_SIZE + x_offset
                y = i * CELL_SIZE + y_offset
                window.blit(drawing[value], (x, y))
        
        # Draw agents and goals on top of the matrix
        window.blit(agent_image, (A1_start_pos[1] * CELL_SIZE + x_offset, A1_start_pos[0] * CELL_SIZE + y_offset))
        window.blit(agent2_image, (A2_start_pos[1] * CELL_SIZE + x_offset, A2_start_pos[0] * CELL_SIZE + y_offset))
        window.blit(goal1_image, (A1_goal_pos[1] * CELL_SIZE + x_offset, A1_goal_pos[0] * CELL_SIZE + y_offset))
        window.blit(goal2_image, (A2_goal_pos[1] * CELL_SIZE + x_offset, A2_goal_pos[0] * CELL_SIZE + y_offset))
        pygame.display.update()

    # Initial draw of all matrices without paths
    for idx, (matrix, title, pos) in enumerate(matrices):
        x_offset, y_offset = pos
        draw_matrix(matrix, x_offset, y_offset)

        # Render the title for each matrix
        font = pygame.font.SysFont(None, 24)
        title_surface = font.render(title, True, (0, 0, 0))  # Black color for text
        title_rect = title_surface.get_rect(center=(x_offset + WIDTH // 2, y_offset + 5))
        window.blit(title_surface, title_rect)

    # Function to animate the path
    def animate_path(matrix, path, x_offset, y_offset, path_type):
        for (x, y) in path:
            matrix[x][y] = path_type
            draw_matrix(matrix, x_offset, y_offset)
            time.sleep(0.1)  # Sleep for 0.1 seconds to create animation effect

    # Animate paths for Dijkstra
    animate_path(matrix_dijkstra, path_A1_dijkstra, WIDTH + 15, 5, 'x')
    animate_path(matrix_dijkstra, path_A2_dijkstra, WIDTH + 15, 5, 'y')

    # Animate paths for A*
    animate_path(matrix_a_star, path_A1_a_star, 5, HEIGHT + 15, 'x')
    animate_path(matrix_a_star, path_A2_a_star, 5, HEIGHT + 15, 'y')

    # Ensure agents and goals are drawn again after animation
    draw_matrix(matrix, 5, 5)
    draw_matrix(matrix_dijkstra, WIDTH + 15, 5)
    draw_matrix(matrix_a_star, 5, HEIGHT + 15)

    # Display the number of tiles traversed in the bottom right black space
    font = pygame.font.SysFont(None, 24)
    tiles_traversed_text_lines = [
        "Tiles Traversed:",
        f"Dijkstra - A1: {len(path_A1_dijkstra)} tiles, A2: {len(path_A2_dijkstra)} tiles",
        f"A* - A1: {len(path_A1_a_star)} tiles, A2: {len(path_A2_a_star)} tiles"
    ]
    
    for idx, line in enumerate(tiles_traversed_text_lines):
        tiles_traversed_surface = font.render(line, True, (255, 255, 255))
        window.blit(tiles_traversed_surface, (WIDTH + 30, HEIGHT + 30 + idx * 30))

    # Update the display to show the drawn matrices
    pygame.display.update()

    # Event loop to keep the window open
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            keys = pygame.key.get_pressed()
            if keys[pygame.K_ESCAPE]:
                pygame.quit()
                sys.exit()
